#
# Production server with UWSGI configured to run on port 8080
# and web configured to run directly on port 80
#
# docker-compose build
# docker-compose up -d web
#
# See accompanying Make commands for easy collectstatic etc.

version: '2'
volumes:
  geoserver-data-dir:
services:

  smtp:
    # Note you cannot scale if you use container_name
    container_name: dimetracker-smtp
    image: catatnight/postfix
    hostname: postfix
    environment:
      # You could change this to something more suitable
      - maildomain=kartoza.com
      - smtp_user=noreply:docker
    restart: unless-stopped
    network_mode: "bridge"

  db:
    # Note you cannot scale if you use container_name
    container_name: dimetracker-db
    image: kartoza/postgis:9.6-2.4
    volumes:
      #- ./pg/postgres_data:/var/lib/postgresql
      - ./backups:/backups
      - ./sql:/sql
    environment:
      - ALLOW_IP_RANGE=0.0.0.0/0
      - USERNAME=docker
      - PASS=docker
    restart: unless-stopped
    network_mode: "bridge"
  #  Uncomment the next line to have an access with PGAdmin using localhost and port 25432 on your computer.
  #  Only for development !
  #  ports:
  #    - "25432:5432"

  dimetracker_uwsgi:
    build:
      context: docker
      dockerfile: Dockerfile
    image: dimetracker_uwsgi:latest
    network_mode: "bridge"

  uwsgi:
    build:
      context: docker
    hostname: uwsgi
    entrypoint: []
    environment:
      - DATABASE_NAME=gis
      - DATABASE_USERNAME=docker
      - DATABASE_PASSWORD=docker
      - DATABASE_HOST=db
      - DJANGO_SETTINGS_MODULE=core.settings.prod_docker
      - VIRTUAL_HOST=dimetracker.kartoza.com
      - VIRTUAL_PORT=8080
      - CONTACT_US_EMAIL=dimas@kartoza.com
    volumes:
      - ../django_project:/home/web/django_project
      - ./static:/home/web/static:rw
      - ./media:/home/web/media:rw
      - ./reports:/home/web/reports
      - ./logs:/var/log/
    links:
      - smtp:smtp
      - db:db
    restart: on-failure:5
    user: root
    network_mode: "bridge"

  dbbackups:
    # Note you cannot scale if you use container_name
    container_name: dimetracker-db-backups
    image: kartoza/pg-backup:9.6
    hostname: pg-backups
    volumes:
      - ./backups:/backups
    environment:
      # take care to let the project name below match that
      # declared in the top of the makefile
      - DUMPPREFIX=PG_dimetracker
      # These are all defaults anyway, but setting explicitly in
      # case we ever want to ever use different credentials
      - PGUSER=docker
      - PGPASSWORD=docker
      - PGPORT=5432
      - PGHOST=db
      - PGDATABASE=gis
    restart: unless-stopped
    network_mode: "bridge"

  btsync-db:
    # BTSync backups for database dumps
    image: kartoza/btsync
    restart: unless-stopped
    volumes:
      # We mount RW so that we can use remove peer to clean up old backups off the server
      - ./backups:/web:rw
    network_mode: "bridge"

  btsync-media:
    # BTSync backups for django media
    image: kartoza/btsync
    restart: unless-stopped
    volumes:
      # We mount RO as we do not really want peers to change this data
      - ./media:/web:ro
    network_mode: "bridge"

  web:
    image: nginx
    hostname: nginx
    links:
      - uwsgi:uwsgi"
    restart: unless-stopped
